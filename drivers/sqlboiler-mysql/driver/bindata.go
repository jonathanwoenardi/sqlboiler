// Code generated by go-bindata.
// sources:
// override/templates/17_upsert.go.tpl
// override/templates/singleton/mysql_upsert.go.tpl
// override/templates_test/singleton/mysql_main_test.go.tpl
// override/templates_test/singleton/mysql_suites_test.go.tpl
// override/templates_test/upsert.go.tpl
// DO NOT EDIT!

package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdf\x73\xdb\x38\xee\x7f\xb6\xff\x0a\xac\xa6\xbb\x2b\x7f\x47\x55\xfb\x9d\xb9\xb9\x87\xdc\xe4\xa1\xf9\xd1\x6e\xaf\x49\x37\x89\x9b\xcb\xcc\x65\x33\x1d\x46\x82\x1d\x5e\x68\x52\xa5\xa8\x24\x3e\xad\xfe\xf7\x1b\x80\x92\x25\x39\xb6\xe3\xfe\xc8\xcd\x3d\xc5\x12\x41\x00\xc4\x07\xf8\x00\x54\xca\xf2\x25\xbc\x10\x4a\x8a\x1c\x76\x76\x21\x7e\x43\xbf\x30\x8f\x3f\x89\x6b\x85\xe0\xff\xc4\x1f\xc5\x0c\xab\x6a\xc8\xa2\x79\x72\x83\x33\xe1\x97\x69\x43\x2b\x01\x7f\x42\x3c\x6e\x57\x79\x83\x9c\x40\xfc\x26\x4d\xdf\x29\x73\x2d\x14\xbc\xac\xaa\xe1\xab\x57\x70\x9e\xe5\x68\xdd\x3b\x10\xce\xe1\x2c\x73\x39\x08\x0d\x52\xd3\xbb\x08\x84\x4e\x21\x35\xc8\xef\x8a\x2c\x15\x0e\xc1\x58\x90\x53\x6d\x2c\x82\xd1\x90\x18\x3d\x51\x32\x71\xf1\x70\x52\xe8\x04\x42\x03\xff\x57\x96\xde\xff\xf8\x3c\x1b\x4b\x3d\x2d\x94\xb0\x55\x35\x6a\xac\x84\xec\x84\x36\x0e\xe2\x8f\x66\xdf\x68\x87\x0f\xae\xaa\x12\xf7\x40\xaa\xe8\x21\xae\x5f\x46\x50\x96\xa8\x53\x72\xb2\xb6\xbc\x6f\x54\x31\xd3\x79\x54\x3b\x57\x3f\xc2\xb5\x91\x2a\xae\x1f\x46\x80\xd6\x1a\x0b\xe5\x70\x60\xd1\x15\x56\x83\x89\xbd\x61\x6f\xb7\x6b\x93\xf7\xbd\x43\x77\xb0\x17\x8e\xca\x12\x55\x8e\xec\x47\x04\xcd\x42\x2d\x59\xaf\xeb\xb4\xaa\xa2\x8d\x9e\x8c\x86\xd5\x70\xb8\x70\x7a\xe8\xc3\x4d\x01\xec\x84\x9c\x7e\x9e\x08\x2d\x93\xa5\xe0\x9f\x7c\x5f\xf4\x81\x75\xe6\xf4\x8e\x03\xb0\x35\x1c\x27\xcf\x8d\x47\x39\x1c\xc8\x09\x39\x45\xd9\xf9\xdf\x04\xe3\x6f\x6c\xf4\xa7\x5d\xd0\x52\x91\x17\x83\x8c\x42\x14\xb2\xbe\x0b\x2b\xb2\x43\x6b\x43\xb4\x76\x34\x1a\x0e\xaa\x55\xc0\xad\x41\x6a\x15\x50\x50\xe4\x52\x4f\xe9\x19\x1f\x30\x29\x9c\xb1\x5f\x53\x38\x1d\xd5\xd9\xb7\xa1\x78\xf2\x38\x9e\xe4\x88\x8f\xdd\x61\xed\x52\x27\xaa\x8f\xa1\x6d\xc5\xeb\x57\x9d\x5d\x4f\xc7\x7a\x7b\xc8\x57\xe4\x59\x37\xaf\xc8\x8d\xe7\x83\xf5\x4e\x58\x98\xcd\xc7\xa7\x47\x2b\x83\x79\xae\xe5\x97\xa2\xb1\x0a\xbb\x30\x13\xd9\x65\xee\xac\xd4\xd3\xab\xcb\x2b\xff\xa3\x64\xca\xb5\x42\x4f\x11\x5e\xc8\xf4\x21\x82\x17\x89\x51\x1d\xda\x3d\xff\x80\xf3\x9c\x8d\x0d\x82\xb2\xa4\xc5\x9a\xab\x83\x1d\x58\x28\x09\xca\x92\xf7\x35\x01\x83\x3f\xe1\x5f\x46\x6a\x08\xfe\x08\x22\xf8\x23\x08\xaa\x2a\xa8\x22\xb6\xc4\xa1\xa7\x43\x2c\x52\xe4\x39\x92\x6f\x8c\xd8\x03\x10\x52\x93\x14\x33\xd4\x4e\x38\x69\x34\x4c\x8c\x85\x1b\x73\x0f\xce\x40\x66\x4d\x86\x56\xcd\xa1\xc8\xb1\x8f\x12\x5b\xec\x01\xb5\x6d\xee\xfe\x6f\xa5\xee\xa2\x7b\xc8\x09\x18\xd8\x6d\xb3\xac\xee\x26\xbc\x9e\xc7\x1f\xf1\x3e\x0c\xca\x32\x3e\xb9\x9d\x7a\x7c\x77\x40\x1b\x28\xcb\x5e\x7f\xa6\x70\xdd\xc9\x14\x53\x0e\x61\xc1\xa7\x0d\x38\x2d\x87\x03\x42\x97\x80\x54\x04\x4d\xe0\xe4\x0c\x73\x27\x66\xd9\x67\x2f\xf5\xf9\x06\x55\x86\x36\x80\x18\x2a\x2f\xdd\x96\xce\x6f\xc6\xdc\xd6\x29\xd6\x2d\xb2\xd4\xec\xe1\xc4\x58\xf4\x41\x65\xa1\xad\x2b\xee\x71\x4d\xb5\xa7\x25\x77\x07\x6d\x2e\x0e\x07\xfa\xdf\x07\x38\x11\x85\x72\x3c\x9f\x7c\x29\xd0\x4a\xcc\xe3\x8f\x46\xff\x13\xad\xa9\x97\xc6\x48\xb0\xd6\xa0\x1f\x98\x7b\xdd\xc2\x5e\x47\xfa\x42\xba\x9b\x5a\x38\x02\x33\x22\xb5\xbe\xfe\x7a\x5a\x8f\x85\x4b\x6e\x1e\xab\xde\xb2\x86\x59\x31\x47\x49\xa1\x0e\x17\x06\x46\x04\xeb\xeb\x75\xa0\x26\x42\x53\xc4\x3c\x0e\x70\x2f\xdd\x0d\x08\x70\x3c\x5d\xb9\x1b\xe1\xa0\x5e\x6f\x0a\x88\x8a\x49\x40\xc1\x9a\x21\x61\xbb\x0d\xc4\xaf\x5e\xc1\x5e\x21\x55\x0a\x89\x48\x6e\x10\x6e\x71\x0e\x52\xbf\x54\x52\x23\x14\x53\x25\xd5\x1c\x5e\xc2\x6c\x9e\x7f\x51\x70\x97\x43\x46\x7f\x33\x6b\xae\x15\xce\xf2\xe1\xe0\xba\x98\x50\x1c\x72\x67\x67\x42\x4f\x15\x52\x03\xdc\x2b\x26\x13\xb4\xe1\x88\x57\xe3\x0b\x2b\x1d\x8e\x99\x50\xc2\xdc\xd9\xc4\xe8\xbb\xf8\xbd\x33\x22\xec\x25\x7b\xfc\x41\xea\x94\xa8\x90\x32\xf0\x73\x04\x09\x69\xf5\xfc\xd5\x97\xdb\x37\x2a\xe7\x90\x2c\xeb\x4e\xf8\x34\xed\xeb\xbd\xb9\xc3\xf0\xd7\xf8\xd7\xa7\xdc\xe8\x73\xc1\x7a\x37\xfa\x72\xdf\xe2\xc6\x63\x9d\x9d\x14\xfd\x01\xba\x9a\xbc\xdc\xa0\x8a\xb0\xdd\xd9\x05\x5a\xad\x17\x46\xc3\x41\x0b\xde\x49\xd1\x80\x77\x5d\x4c\x46\x5c\xcf\x2b\x6b\xc3\xd7\xee\x3e\xa5\xcb\x71\xe1\xe2\xb3\x23\x93\xdc\x92\x26\x4e\xa0\xc8\xe7\x51\x4a\x86\x9e\xde\x7f\x79\x8b\xf3\xab\xad\x0d\x9d\x6b\xe5\x4d\x0d\x07\xd4\x23\x89\x0c\xb8\x26\x7c\xf5\xfc\x54\x1b\xa6\x00\x34\x83\xa9\x45\x47\x8e\xf4\xd1\x7b\xdf\x79\xa2\x3a\x1d\x0e\x06\xeb\x3c\x68\x4a\xf4\x69\x91\x2e\x53\x6c\x27\x6d\x0a\xd7\xdd\xd0\x66\x03\x3d\x8e\x86\x83\x41\xdd\x11\x77\x76\x97\x8a\xe0\xbc\xf3\xf4\xfd\xfe\x9f\x58\x39\x13\x76\xfe\x01\xe7\x1d\x61\x0a\x71\xc3\x48\xde\x78\x87\x8e\x9e\x6e\x32\x85\xf6\x4c\x64\x1a\x82\x5a\x6a\x39\x11\x24\xa6\x50\x29\x93\xfe\x35\x93\x4f\x7d\x56\x4f\x4d\xa0\x64\xce\x2d\x88\x09\x8a\xcc\x41\x97\x64\xc6\x34\x65\xcf\x32\x85\xd4\xfc\x43\x8b\x2e\x6a\xd3\x9f\x36\x71\x1e\xc4\x44\xce\x73\xd8\xf5\xfa\x7d\x26\x9d\xd2\xab\x63\x62\xe5\x30\x95\x42\x61\xe2\x22\x08\x96\x5c\x0b\x9a\x3e\xdc\x34\xe0\x56\xa3\x45\xaf\x01\x76\x61\x32\x73\xf1\x38\xb3\x52\xbb\x09\x87\x3f\x18\x1f\x1e\x1d\xee\x7f\x82\x9f\x73\x78\x7b\xf6\xfb\x31\x9d\xf7\xe8\xb4\xaa\x96\x74\x97\x65\x7c\x76\x5a\x55\x70\xf1\xdb\xe1\xd9\x21\xfc\x9c\x07\x8c\x8b\x1f\xb7\xf2\xf8\xef\x46\xea\xb0\x3d\xe5\xfb\x14\xb5\x3b\x2d\x8c\xc3\xb1\x92\x09\x36\x1e\xc7\x47\xa7\x11\x34\xbf\xcf\x4e\x39\xc5\x47\x11\x04\x51\x30\x6a\xb4\xd5\x0a\x2e\x6e\xd0\xe2\xbe\x12\x45\x8e\x8c\x0f\x39\x14\xf8\x03\x9f\xf9\x9f\xaf\xbb\x81\x5b\xc0\xee\x0f\x7b\x27\x54\x81\xc7\x22\xcb\xa4\x9e\x46\x5c\x6a\x6d\xbf\xdb\x93\x3a\xad\x97\xd6\xf5\xcf\x4f\xf3\x0c\xa3\x75\x04\xb0\x50\xdb\x46\xb8\x9e\x11\x3a\xbd\xbd\xd7\xdc\x89\xbd\x9a\x7c\xa4\x03\x93\x60\x9d\x8c\x0b\x6c\x9e\xdb\x59\xb2\x4b\x06\x57\xb8\xda\xf7\x95\x9d\xad\x7c\x77\xe5\x30\x32\x4d\xe3\x84\x21\x7b\xaf\x53\x69\x31\xa1\xbc\xf5\x2f\xfe\x41\x12\xbf\x4f\x42\x43\x8d\xe7\x4e\xa8\xde\x64\xc1\x8b\xf9\x5b\x6b\x66\xcd\x11\x58\x61\x4d\xb2\x3d\x90\x46\x9e\x14\xbd\x27\x39\x5c\x5e\x49\xed\xd0\x4e\x44\x82\x65\xb5\x98\x2e\x96\x83\xd5\x09\x64\xb3\xb1\x35\x7e\xe2\xec\x7a\xd3\x1d\x1d\xfe\xa4\x72\xe2\x67\xd4\x03\xbc\x2e\xa6\xc7\x26\x45\xd6\x4a\x85\xf2\x96\x0b\x45\xe9\xb0\x5d\xe7\xe6\x64\x1b\x5d\x5c\xaa\xa3\xa7\xa5\x29\x3a\x8b\xc1\xf4\x45\x22\xf4\x91\xc8\x9d\x67\xf3\xf7\x07\x9d\xeb\xcd\xfe\xd2\x0a\x4f\xa1\x3c\x65\x3e\xda\xc4\x4b\x83\xa5\xd9\xde\xbf\xb5\x98\xf3\xd8\x57\xcf\xae\x34\x81\xf2\xa4\x1f\x76\x9c\xf6\x3e\xc5\x71\x3c\x62\x2d\x34\xfe\x6f\xde\x5c\x5b\x08\x79\xbc\xdd\xa0\xa8\xbe\x0b\xf6\x74\xae\x76\xf3\x73\x93\xf0\x5f\xe7\xe0\xe3\x6d\x5f\xef\x5a\x33\x6d\xaf\x28\x89\x7e\x8b\xa0\x0b\x2f\xdd\x76\x3d\xfb\x6c\x6a\x14\x34\xd9\x2c\x33\xf2\x02\xf2\xb5\x00\x52\xe2\x2b\x7a\x7b\x00\x52\xbb\xbf\xfe\xa5\xe7\x1c\x2d\xfa\xc9\xf7\x58\x64\x70\x79\x55\xd4\x22\xf4\xbe\xa1\x3f\x1e\xe8\xfa\x25\xb3\xa1\x66\x16\x9d\x70\x6a\x9c\x01\x9e\x4f\xea\x0b\xcf\x93\x9e\x7a\x2f\x9b\xd8\xfb\x2c\x89\x3b\x62\x29\x0d\x52\x6b\xc3\x79\x68\xed\x78\xae\x93\xb7\x42\xaa\xb6\x0c\x8c\xe2\xaf\xa8\x3c\xe6\xa4\xf8\xd0\x14\xc1\xc9\x07\x9c\x2f\xae\xca\xaf\x5b\xc8\x96\x3e\x05\xf0\x27\x2b\x6e\xba\x0b\x4d\x3d\xd1\x4f\xd2\x29\x3f\xcd\xd5\xec\xb8\x24\x4d\xb2\x26\xf6\x7e\x78\xd9\xaa\x02\x1e\xfd\x12\xa3\x62\x62\xd6\xaa\x0a\xfd\xa9\xfd\xc9\x6a\x9c\x98\x77\x7e\xf9\x65\x7d\x84\xff\x9f\x56\x97\x57\x2e\x5f\x5f\xd1\xda\x66\xaa\xbe\x0c\xda\xb0\x54\x55\x70\xb5\x1e\xaa\xde\x8d\x71\x91\x23\xcf\xd6\x41\xba\x53\xca\x0f\x28\x19\x8b\xce\x4a\xbc\xc3\xe6\x5e\xc7\xfc\x9c\xaf\x29\x21\xa0\xe3\xf6\xd2\x7d\x53\x97\xd9\xa6\x5b\x45\x6d\x55\x8d\xbe\x8f\xff\x9b\xc1\x6a\x8b\x16\xd0\x3d\x81\xa7\xa4\x45\xc1\x2d\x13\x63\x87\xde\x58\xfb\x99\xb9\x0f\xfb\xf6\x1e\xab\x8b\xc7\x89\xe0\x09\x83\x5a\xa1\xd7\xdf\x25\xcd\x15\x2a\x57\xb0\xe6\xd7\xaa\x6f\x08\xf5\x07\xa4\x44\x66\xb2\x82\xbf\xd5\xa4\xfe\x2e\xb1\x39\x27\x28\x76\xdd\x92\xd8\x79\x74\x8f\xda\xee\x62\xd6\x5c\x00\xb7\x10\xe7\x0b\x1f\xec\xfa\x48\x6d\x6d\x60\x71\xf1\x1b\x6c\xf8\xcc\xb4\xf8\x47\x4a\x6a\xde\x4c\x1c\xda\x6f\xfa\xc4\x54\x53\x42\xa7\x8f\xb3\x52\x4d\x84\xdb\xfd\xd4\xf9\x9f\x00\x00\x00\xff\xff\xa7\xf0\x2c\xe5\xff\x1a\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSingletonMysql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xdf\x8f\xd3\x30\x0c\xc7\x9f\x93\xbf\xc2\x54\x3a\x5d\x2b\x45\x3d\xee\x15\x69\x0f\x77\x6c\x9c\x0a\x63\xbf\x07\x42\x88\x87\x6c\x71\xb6\x48\x5d\x3a\x12\x67\x30\xa1\xfd\xef\x28\x5d\xb7\xf5\x8e\x21\xf1\xc0\x4b\xeb\xc4\xf6\x37\xfe\xd8\xbe\xbb\x83\x45\x30\xa5\x9a\x6f\x3d\x3a\x1a\x07\x74\xfb\x8f\xfb\xe9\xb8\x7f\xbc\xf5\x20\x21\x1e\x3c\x49\xc2\x0d\x5a\x02\x4f\xce\xd8\x15\x04\x1f\xbf\xb4\x46\x08\x75\x62\x57\x92\x84\xad\xab\x76\x46\xa1\xca\xb9\x0e\x76\x79\x5d\x37\x55\x46\x82\x72\x66\x87\xce\xe7\x5d\x23\x4b\x5c\x92\x00\x92\x8b\x12\x07\x72\x83\x8d\xbe\x80\xb0\x55\x92\x50\xc0\x8f\xb5\x21\x2c\x8d\x27\xf8\xfa\xed\xe8\xcb\x4e\x35\xfc\xe2\xec\xe2\xed\xc4\xdb\x8d\xb4\xab\x12\xf3\x42\xa1\xa5\x71\xa8\x08\xa7\xa5\x59\x62\x7c\x32\xef\x8f\x05\xc4\xff\x64\xdc\xd2\xcc\x38\x67\x8b\xa0\xe1\x4d\x3b\xfb\x09\xe9\x31\x68\x8d\x2e\xcd\x38\x53\xa8\xd1\xb5\x9c\xa3\x70\x72\x2e\x82\x8e\xe9\x3b\xe9\x60\x59\x95\x61\x63\x7d\x53\x17\x67\x46\x43\x89\x36\xbd\x3c\x03\xaf\x3a\xf0\x3a\xd6\xcb\x4e\xa1\x9d\x26\xd8\xe7\xef\x2b\xd3\x0a\x15\x90\x08\x48\x32\xce\x0e\xfc\xac\x73\x6c\x45\x06\x9d\x93\x88\xde\x50\xfe\x6e\xeb\x8c\x25\x9d\x72\xc6\x22\x82\x88\xff\xa4\x18\x4c\x7b\x93\x19\x14\x4f\x83\xe1\xa4\x07\xc5\x60\x36\x84\x1b\x0f\xe9\x8d\xcf\xe0\xd3\x43\x7f\xde\x9b\xd6\x76\x52\x07\x9f\x5b\x5e\x9f\x9a\xba\x6a\xbb\x45\x5b\xca\x25\xae\xab\x52\xa1\xf3\x75\x17\xe7\x1e\x0b\xab\xf0\x67\xdb\x21\x5e\xc0\x0a\xb8\x17\x70\x9f\x45\xa9\x8c\x33\xe6\x90\x82\xb3\xb0\x08\x3a\x9f\xd6\xc8\x69\x43\xf7\x82\xa2\x81\x38\x33\xfc\xa5\x78\x18\x0e\xa0\x3b\x1f\xf5\x8b\xb7\x0f\xb3\x1e\x7c\xe8\x7d\x81\xf9\xa8\x1b\xcd\x9a\xea\x19\x54\x8b\xe9\xbf\x21\xc5\x91\xeb\xca\x81\x11\xb0\x8b\x6b\xe3\xa4\x5d\x61\xb3\xac\xf5\x6c\x8c\x06\x73\x19\x77\xa4\xca\x3f\x3b\x43\xf8\xb8\x27\x4c\x6f\xc5\x6d\x6c\xc9\x81\x33\xf6\x3d\xae\xa7\x7a\xbe\x79\x97\xbd\xfd\x63\x65\x77\x19\x6f\x89\x35\x8d\x3c\x6a\x5c\xf3\x24\xd0\x69\x9a\x96\x26\xff\x98\x79\x2c\x30\xbb\x6d\xa6\x73\x6d\x6c\x07\xfe\x3b\x00\x00\xff\xff\xa9\x3a\x4a\xd3\x2e\x04\x00\x00")

func templatesSingletonMysql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonMysql_upsertGoTpl,
		"templates/singleton/mysql_upsert.go.tpl",
	)
}

func templatesSingletonMysql_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonMysql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/mysql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMysql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x4f\xdc\x4a\x12\x7e\xb6\x7f\x45\xed\x48\x9c\xb5\x39\xa6\x89\x74\xa4\x7d\xe0\x68\x84\xc2\x30\x1c\xa1\x84\x4b\x66\xd8\x8d\x56\x21\x4a\x1a\xbb\x06\x5a\xb1\xbb\x4d\x77\x9b\x61\x16\xf1\xdf\x57\xd5\xed\xdb\x30\x78\x14\xa4\xec\xdb\x3e\x81\x5d\x5f\xd7\xe5\xab\xae\x8b\xe7\x81\x6b\xd0\xb7\x8f\x67\xab\xf9\xa7\x8f\x3f\x70\x05\x63\xd0\x78\x8b\x8f\x25\x3b\xab\x8c\x9d\xa8\xa2\x14\x39\x46\xdf\xa3\xc3\x22\x8e\xa2\xe4\x5a\xc6\x87\xd7\xe6\xf7\xc9\xc5\xf9\xfc\x6a\xf6\xfe\xf4\xfc\x8a\xed\x1e\x9e\x5c\xcc\xa6\xa7\x7f\x9d\xc3\x87\xe9\xbf\xd9\xee\xe1\xb5\x8c\x7f\xff\x1e\x87\xa1\x5d\x95\x08\xc5\xca\xdc\xe7\x57\x68\x2c\x6a\x30\x56\x57\xa9\x85\xa7\x30\xc8\x6e\x26\x4a\x4a\xd8\x35\xf7\x39\x3b\x3e\x0a\xe9\xc5\x39\x2f\x30\x30\x56\x0b\x79\x1b\x06\x77\xca\xd8\xf6\xa1\x32\xa8\xdb\x87\x92\x1b\xd3\x3e\x18\x93\x17\x2a\xeb\x8e\x95\x4a\xdb\x40\x48\x1b\x86\x81\x2a\xad\x50\xf2\x44\xe4\x08\xb5\x34\x0c\x2c\x1a\x7b\x7c\x44\x86\x9a\x77\xcf\x61\xb8\xa8\x64\x0a\x42\x0a\x1b\xc5\xde\xb3\x33\x2e\x24\x8c\xe1\xb7\x9e\xe7\x4f\xcf\x2d\x32\x2a\x60\xb7\x27\x89\xc1\xa0\xad\xca\x28\x06\xd4\x5a\x69\xd2\x40\x6c\xa2\xd6\xfe\x45\x18\x06\x0f\xa2\x44\xcd\xe6\x68\x8f\x71\xc1\xab\xdc\x46\x23\x77\x9e\xd5\xce\x8f\x12\x18\x59\x5d\xe1\x28\x1e\x86\x52\x5c\xa3\x04\xfe\xf8\xe3\xdd\x3f\xe2\x30\x0c\x0a\xe6\xe9\x82\x31\xf8\x13\x7f\xa1\x9d\xbb\x80\x9a\x03\xd9\x8d\xe4\x85\x53\x59\x30\xe2\x72\x18\x49\x52\x8f\x23\x9a\x87\x71\x24\xf5\x38\xca\xc0\x30\x8e\xa4\x35\x4e\xe9\x35\xbb\xa7\x72\x3d\x1e\x07\xaa\x49\x18\xd6\xd7\xb0\x44\x71\x13\xab\x63\x78\xe0\x39\x67\x47\x78\x2b\xe4\xbf\x78\x2e\x32\x4e\x79\x8e\x62\x56\x3f\x60\x14\x06\x81\x83\x78\x3d\xe7\xca\x4e\x8b\xd2\xae\x22\x1f\x60\x02\x6b\xf1\x24\x83\x60\xe2\xa5\x05\x7b\x92\x5a\xf0\xb9\xb2\x91\xfb\x67\x7a\x5f\xf1\xdc\x44\x3e\xd6\x04\xde\xb5\x07\x7c\x80\x5b\xd4\xfb\x04\xb6\xf8\x26\x5f\xc3\x07\x6a\x1e\xda\x13\x2d\x2f\x49\x18\xc4\x6c\x72\x87\xe9\x8f\x88\x38\x12\x0b\x77\xf9\xfe\x36\x06\x29\x72\xba\x8e\x81\x46\x5b\x69\x49\x6f\xc3\xe0\x39\x0c\x83\xfd\x7d\x98\x68\xe4\x16\x81\x83\xe6\x32\x53\x85\xf8\x0f\x66\x90\xdd\x00\xf9\xc0\x28\x2b\xbd\x42\x19\x77\x18\x36\xb7\xfc\x26\x47\x2f\x68\x63\xe8\x19\x1d\x43\xc1\x0a\xfe\x03\x2f\xda\xda\x8b\xe2\x3f\x87\xdd\x51\xda\xb0\xcf\x9a\x97\x11\x6a\xca\x4b\xaa\xaa\x3c\x93\x7f\xb7\x40\x2a\xc0\xd7\x2f\x2c\x44\xee\xae\xf1\xf3\xba\x95\x4c\xab\xf2\xca\x39\xb9\xd5\x02\x9d\xeb\x1f\x4b\x5d\xdc\x3f\x79\x30\x0c\xb2\xaa\x28\x27\x45\x06\x07\x63\xc0\x47\x4c\xd9\x44\x15\x05\x97\x59\x7d\x35\x49\x3a\x4a\xc8\x19\x5f\xac\xc6\x07\x9c\xc0\x68\x6f\x4f\xaa\xbd\x8c\x5b\xee\xc5\x35\x4d\x81\xb7\x3e\xac\x70\x48\x19\x69\xba\xe1\x06\x9d\xbc\x4b\x0d\x11\xaf\x13\x58\x92\x36\xa1\xd8\xa5\x28\x31\x8a\x5b\xa7\xd9\xdc\x66\xaa\xa2\x02\x5c\xf6\x2c\xd3\x5b\xd7\xdd\x24\x2e\x4f\x3e\xe0\xea\x18\x8d\xd5\x6a\x85\x3a\xea\xf5\xff\x04\xf4\x5a\x52\x3b\x8d\x5c\xdb\xb7\x64\x74\xc1\x45\x8e\x19\x58\x05\x86\x8e\x42\x4b\x1b\xa4\x3e\x70\x9f\xd9\xce\x52\xdf\xcf\x5f\x61\x6b\xdd\xce\x2b\x21\x7d\xe6\xe2\x35\x2b\x8b\xc2\xb2\x4b\x2d\xa4\xcd\x25\xa9\x8f\x7f\xce\xf0\x92\x0b\x0b\x0b\xa5\x87\xe2\x0c\x83\x6f\x94\x0e\x36\xc9\x95\xc1\x28\x86\xfd\x7d\x78\xbf\xa0\xb9\xd8\xdc\x33\x61\x20\x53\x12\x13\x48\x09\x01\xf6\x0e\x61\xa9\x85\x45\x40\x99\x81\x5a\xb8\x17\xa5\x28\x31\x7c\x95\xb2\xff\x61\x2c\x2f\xe3\xa8\x15\x48\x91\x6f\x99\x8b\x26\x3f\x53\x19\x46\xae\xbd\xfb\x71\x1b\xd7\x7f\xc9\x2f\xb3\x14\x36\xbd\x03\x27\x7d\x0a\x83\x94\x1b\xac\xe7\xe0\x41\xe7\xe1\x68\x36\xfd\xf4\xcf\xd3\xd9\xf4\x78\xd4\x20\x16\x3c\x37\xeb\x90\xe3\xd3\xf9\xfb\xa3\x8f\x0e\x52\xd7\x4e\x5f\x7a\x39\x9b\x9e\x4c\x67\x5e\xc3\x96\x21\xbe\x5e\x75\x3d\x37\x6b\x3d\x44\xe2\xbc\x24\x16\x17\x11\x55\x64\x0d\xdf\xa3\xf6\x34\xde\x31\xae\x32\xbb\x8d\x23\x1e\x36\xf4\xb2\x3d\x76\x6b\x83\x2d\xca\xc4\xe5\xce\x95\x73\x65\x45\xce\xae\xb0\x28\x1d\x6c\x44\x4b\x82\xd7\xdf\x34\xc4\x6d\x7d\x7e\x30\xab\xfe\xb2\xbc\xda\x5b\xcd\xd5\xe4\x92\x4c\x3b\x82\xc3\xe0\x5b\x52\xdf\x2f\x65\xa8\x16\x6d\x3d\x11\xbd\x61\x65\xd8\xa9\xa1\xd9\xf4\x28\x8c\x75\x97\xca\x39\xe0\x75\x8c\x81\xb2\x18\x06\xcf\x80\xb9\x41\x78\x83\x9f\x6e\x00\x80\x54\x96\x4a\xd8\x42\xd1\xee\x26\xe4\x20\x65\xe0\xa4\xac\xef\xb1\xe3\x6a\xf4\x25\xcd\x05\x4a\xfb\x95\x20\x9d\x78\x51\x4b\xe9\xf0\x78\xc7\x5c\x4b\x97\x9c\xda\xf9\x4d\x18\x4d\xea\xf1\x4e\x56\xc3\xe8\xe9\x55\x18\xad\x0b\x9d\x36\x7a\xf2\x54\xe4\x28\x23\xbf\x12\xc5\x14\xe3\xbb\xb6\xe4\x5e\x58\xe1\xc6\x2c\x95\xce\x3a\x15\xee\x88\xeb\x7e\x9b\x68\x63\xf2\x3d\x2a\x8c\x0e\xdd\x16\x53\x33\xf7\x63\x6f\xde\x53\xbe\x6e\xb3\xe5\xa7\xd4\xca\xaa\x54\xe5\x63\x9b\x96\xdb\x68\x6c\xdb\xd5\xff\x99\x7c\x03\x93\xfd\x82\xa7\x4b\x5f\x94\xcc\xed\x45\x71\xd7\x1f\xe9\x5d\xdd\xec\x87\x3b\xc2\xfa\x4e\xd2\xf5\x03\x6a\xbb\x54\x8f\xfd\xce\x53\xd7\x6f\xb3\x10\xc0\x8e\xf9\x73\x63\x29\x68\x8c\x17\x4c\x57\x72\x52\x64\x91\xb9\xcf\x9b\xad\x71\xb4\xc5\x8f\xfe\x4a\xb5\xdd\x0b\x42\x76\x3e\x50\x81\x53\x1f\x30\xbf\xd4\x1b\x8b\x5c\x67\x6a\x29\xfb\xbe\x88\x85\xdb\xa6\xdc\x97\xe3\x66\x3f\x69\x44\x2d\xe3\xfd\x89\x7f\xf0\xc6\xa5\xb1\xf5\x5b\x19\x36\xc3\x42\x3d\xd0\x85\xf9\xa9\x06\xdf\x84\x49\x7b\x56\xd2\xcc\xcd\x7a\xa0\x24\xc0\xf5\xad\x01\xc6\x58\x33\x0f\xdb\xd8\x9c\x60\x0c\xbc\x2c\x51\x66\xd1\x97\xaf\x1e\xf0\xf4\x72\x1f\x7c\xf6\x2a\x18\x63\x74\xcd\xd2\x57\x56\xc9\xda\x62\x0f\x47\xb0\x76\xef\xf3\x7a\x0d\x3b\xc7\xe5\x0c\x79\x86\xda\x7b\x4a\xda\x8c\x5f\x18\x0f\xc6\xf0\xdb\xcd\xca\xa2\x61\x47\xd5\x62\xe1\xbe\x7d\x49\x54\xb3\xb8\x21\x4a\xfb\xab\xa6\x57\xd1\xbe\xf4\x13\xc4\x1f\xee\xa7\x82\xc4\xb3\x4a\x6e\x66\xa1\xbf\xab\x34\x63\x4b\x57\x52\x0a\x79\x7b\x30\x6a\xd9\xf4\xb1\xc5\xeb\x70\x6f\xba\xfe\x6e\x8a\xe2\x4d\x29\x6a\xdd\x97\x0e\xe4\x7b\xeb\x4a\x93\x2a\x49\x17\x32\xaa\x7f\xb6\x48\x7c\xfa\xe2\xe1\xbb\xf9\xe2\x6a\x26\x4e\xbd\x33\xb7\xfe\x23\x41\xd0\x21\x6a\xce\xee\x73\x76\x51\xa2\xec\xbe\x0c\x32\x2d\x1e\x50\x33\xb7\xa3\x1f\x55\x22\xcf\x3e\x55\xa8\x57\x75\x40\xcd\xb7\xad\x6f\x86\xeb\x35\xd8\xf4\xec\xa6\x29\xd7\x4d\xb0\xd7\xfa\xd6\x73\xd0\x11\x91\x6c\xb0\xb3\x1e\xc8\x73\xf8\xdf\x00\x00\x00\xff\xff\x30\xaa\xa2\x5e\x39\x12\x00\x00")

func templates_testSingletonMysql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMysql_main_testGoTpl,
		"templates_test/singleton/mysql_main_test.go.tpl",
	)
}

func templates_testSingletonMysql_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMysql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mysql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMysql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x0a\xc2\x30\x10\x44\xef\xfd\x8a\xa5\xe4\xd0\x4a\x9b\x0f\x10\x3c\x78\xd4\x83\x88\xb4\x1f\x10\xed\xb6\x04\xe2\x5a\xba\x5b\x10\x42\xfe\x5d\xd2\x46\xe9\xc1\xdb\x0c\x6f\x32\x99\xed\x67\x7a\x40\x83\x2c\xed\xc8\x38\x49\x21\xb0\x13\x64\xb1\x34\xe8\xa6\x04\x9f\x01\x78\x5f\xc3\x64\x68\x40\x50\x96\x3a\x7c\x57\xa0\xc4\xdc\x1d\xc2\xfe\x00\xba\x89\x8a\x43\x48\x39\xdb\x27\xa8\x4f\x7c\x7e\x59\x5a\x30\xd4\x3f\x8e\x8e\xb7\x56\x19\x67\x0d\xc7\x22\xa5\x8f\x51\x22\xaf\x8d\xdf\x96\x8b\x79\xe2\x92\x16\x7d\x9b\xa9\xc8\xbd\x5f\x9f\xe8\x76\xbc\xba\x79\x32\x2e\x84\xbc\x82\x38\xf8\x0f\x59\x2f\x2a\x97\xbf\x90\xba\xed\x8c\xe4\x42\xf6\x09\x00\x00\xff\xff\x11\x5d\x4c\xce\xff\x00\x00\x00")

func templates_testSingletonMysql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMysql_suites_testGoTpl,
		"templates_test/singleton/mysql_suites_test.go.tpl",
	)
}

func templates_testSingletonMysql_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMysql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mysql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\xcd\x6e\xdb\x3c\x10\x3c\x8b\x4f\xb1\x9f\xf1\xb5\xa0\x0a\x85\x69\xaf\x29\x7c\xc8\xdf\x21\x68\x6b\xb8\xb1\x7c\x2e\x18\x69\xe5\x10\xa6\x49\x95\x5c\xd5\x76\x05\xbe\x7b\x41\xc9\x76\x9c\xd8\x69\x73\x68\x0f\x39\xf8\x87\x8b\xd9\x9d\x99\x5d\x2e\xdb\xf6\x04\xfe\x97\x5a\x49\x0f\x67\x43\x10\xe7\xf1\x1f\x7a\x91\xcb\x3b\x8d\xd0\xff\x88\x91\x5c\x60\x08\xac\x6a\x4c\x01\x84\x9e\xda\xb6\xcf\x10\xd3\x7a\xac\x1b\x27\x75\x08\xd3\xda\xa3\x23\x4e\xf0\x2e\x02\x94\x99\x89\x3c\x85\x96\x25\x24\xc6\xd2\x49\xad\x51\xf3\x94\xb1\x44\x55\xa0\xd1\xf0\x5d\x81\x2b\xbb\x34\x13\x65\x66\x8d\x96\x2e\x84\x4b\xab\x9b\x85\xf1\x29\x0c\x87\xbf\x83\x8d\x9d\x5a\x48\xb7\xfe\x84\xeb\x5d\x42\xcb\x92\x84\xc4\x64\xae\x6a\x3e\x88\xdf\xb5\x32\x33\xa0\xce\xc3\x52\xd1\x3d\x58\xa3\xd7\x50\xf7\x79\x30\xc7\x35\x14\x7d\xe6\x20\x65\x49\xd8\xc9\x5a\xac\x27\x5f\x3f\xef\x99\x7b\xa0\x9c\x1a\xf5\xbd\xc1\x7d\x7d\xef\xff\xc8\x69\x2c\x34\x5d\xda\x96\x0c\xc8\x42\x61\x4d\xa5\x55\x41\x60\x4d\xcf\xcd\x12\x8f\x58\xc6\xde\x3b\x69\x4a\xbb\x50\x3f\x51\x8c\x70\x39\x41\x2c\x79\xca\x92\x1f\xd2\x01\xba\xee\x63\x1d\x4b\x4e\x4f\xe1\x9c\x08\x17\x35\x01\xdd\x23\xdc\x8c\x26\xd7\xb7\x39\x78\x55\x22\xd8\x0a\xa4\x81\xe9\x38\x46\x58\x62\x63\xc5\xa3\x56\xda\xde\x6f\x2c\xba\xcf\x39\x21\xd7\x14\xc4\xa3\x98\x0c\xde\xda\x0c\x9e\x69\xfe\xd5\x45\xbe\xae\xd1\x67\x50\x49\xed\x31\xfd\xd8\x15\xfa\x6f\x08\x46\xe9\x4d\x47\xae\xa3\xd4\x8a\x0f\xa6\xa6\xeb\x05\xd9\x07\x96\xe3\x8a\xc0\x77\xdc\x67\xf0\xc6\x0f\xb2\x58\x6f\xd3\x98\xb6\x55\x15\x18\x4b\x20\x46\xf6\xd2\x1a\xc2\x15\x85\x50\xd0\x2a\x5a\x2b\xfa\xb3\xb8\x90\xc5\x7c\xe6\x6c\x63\x4a\x9e\xb6\x2d\x9a\x32\x04\x96\xf4\x90\x2f\x8d\xa7\x7c\xc5\xbb\x2a\xfb\x15\x0e\x02\x77\x56\x69\x71\x81\x33\x65\xba\x1a\xda\xe3\x7e\x2c\x5f\xf1\x82\x56\x59\x34\xb8\x65\x78\x11\x28\x65\x49\x89\x15\x3a\x88\x6b\xc3\x53\x68\xe1\x1b\x0c\x81\x56\xe2\xd6\x6a\x7d\x27\x8b\x39\x4f\x21\xc4\x11\xef\x86\x61\xc5\x66\x8b\x9e\x33\x1e\x87\x82\xa6\x84\x93\x10\x20\x9e\x3a\xfe\x1b\x53\xa1\xe3\xe9\xe3\xd3\xcb\xe6\xd2\x74\x74\xc7\x87\x72\x30\x8d\xc2\x36\x86\xba\xc0\x93\xab\xb5\x7d\x02\x78\x2a\x2e\x23\xe6\x85\xf2\x1f\x9c\x1f\xaa\xe4\x5b\xda\x08\xe9\x88\x23\xe8\xc3\x23\xc8\x60\x29\x4d\x5c\x23\x04\x87\x85\x75\x65\x06\x33\x4b\x67\x83\xac\xc7\x6f\x44\x3f\xd9\x97\xe9\xf8\xea\x3c\xbf\x3e\xb6\x2f\x7f\x6d\x23\x9e\x85\x1d\xbc\x5a\x42\x88\x7f\xba\x3e\xaf\xef\x5e\xbd\x92\x6b\x15\xd8\xaf\x00\x00\x00\xff\xff\x05\xd5\xa1\x1c\x35\x07\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl": templates17_upsertGoTpl,
	"templates/singleton/mysql_upsert.go.tpl": templatesSingletonMysql_upsertGoTpl,
	"templates_test/singleton/mysql_main_test.go.tpl": templates_testSingletonMysql_main_testGoTpl,
	"templates_test/singleton/mysql_suites_test.go.tpl": templates_testSingletonMysql_suites_testGoTpl,
	"templates_test/upsert.go.tpl": templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"mysql_upsert.go.tpl": &bintree{templatesSingletonMysql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"mysql_main_test.go.tpl": &bintree{templates_testSingletonMysql_main_testGoTpl, map[string]*bintree{}},
			"mysql_suites_test.go.tpl": &bintree{templates_testSingletonMysql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


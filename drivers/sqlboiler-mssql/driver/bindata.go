// Code generated by go-bindata.
// sources:
// override/templates/17_upsert.go.tpl
// override/templates/singleton/mssql_upsert.go.tpl
// override/templates_test/singleton/mssql_main_test.go.tpl
// override/templates_test/singleton/mssql_suites_test.go.tpl
// override/templates_test/upsert.go.tpl
// DO NOT EDIT!

package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdd\x6e\xdb\xb8\x12\xbe\x96\x9e\x62\x1a\x1c\x34\xd2\x39\x8e\x72\xf6\x36\x0b\x5f\x24\x4d\xdb\x2d\xda\x64\xdd\xba\xd9\x02\x1b\x04\x01\x2d\x8d\x6c\x22\x34\xa9\x52\x94\x53\xaf\x57\xef\xbe\x18\x92\xb2\x64\xc7\x8e\x9d\x76\xb3\xd8\x8b\x22\x16\x39\x9c\x9f\xef\x1b\xce\x70\xba\x58\x1c\xc1\x7f\x98\xe0\xac\x84\x93\x3e\x24\xa7\xf4\x0b\xcb\xe4\x33\x1b\x09\x04\xf7\x27\xb9\x64\x53\xac\xeb\xd0\x8a\x96\xe9\x04\xa7\xcc\x6d\xd3\x81\x56\x02\xfe\x84\x64\xd8\xee\xda\x03\x3c\x87\xe4\x34\xcb\xde\x0a\x35\x62\x02\x8e\xea\x3a\x3c\x3e\x86\xab\xa2\x44\x6d\xde\x02\x33\x06\xa7\x85\x29\x81\x49\xe0\x92\xd6\x7a\xc0\x64\x06\x99\x42\xbb\x56\x15\x19\x33\x08\x4a\x03\x1f\x4b\xa5\x11\x94\x84\x54\xc9\x5c\xf0\xd4\x24\x61\x5e\xc9\x14\x22\x05\xff\x5d\x2c\x9c\xff\xc9\x55\x31\xe4\x72\x5c\x09\xa6\xeb\x3a\x6e\xac\x44\xd6\x09\xa9\x0c\x24\x97\xea\x95\x92\x06\xbf\x99\xba\x4e\xcd\x37\x52\x45\x1f\x89\x5f\xec\xc1\x62\x81\x32\x23\x27\xbd\xe5\x57\x4a\x54\x53\x59\xf6\xbc\x73\xfe\x13\x46\x8a\x8b\xc4\x7f\xc4\x80\x5a\x2b\x0d\x8b\x30\xd0\x68\x2a\x2d\x41\x25\xce\xb0\xb3\xdb\xb5\x69\xcf\xbd\x45\x73\x7e\x16\xc5\x8b\x05\x8a\x12\xad\x1f\x3d\x68\x36\xbc\xa4\xdf\x97\x59\x5d\xf7\x1e\xf5\x24\x0e\xeb\x30\x5c\x3a\x1d\x3a\xb8\x09\xc0\x0e\xe4\xf4\x73\xc0\x24\x4f\xd7\xc0\x1f\xfc\x18\xfa\x60\x75\x96\xb4\x66\x01\xd8\x9b\x8e\xc1\x73\xf3\xb1\x08\x03\x9e\x93\x53\x94\x9d\xff\x24\x19\x3f\x5b\xa3\x2f\xfa\x20\xb9\x20\x2f\x82\x82\x20\x8a\xac\xbe\x2f\x9a\x15\xaf\xb5\x8e\x50\xeb\x38\x0e\x83\x7a\x13\x71\x5b\x98\xda\x44\x14\x54\x25\x97\x63\xfa\xc6\x6f\x98\x56\x46\xe9\xa7\x5c\x9c\x8e\xea\xe2\xfb\x58\x1c\x3c\xc4\x93\x1c\x71\xd8\xbd\xf6\x2e\x75\x50\x7d\x48\x6d\x2b\xee\x97\x3a\xa7\x76\x63\xbd\x3f\xe5\x1b\xf2\xac\x9b\x57\xe4\xc6\xf3\xd1\xba\x04\xfa\x6f\xa7\x70\x3f\x9a\xfe\x5d\x2c\x2d\x0b\x25\xcf\x41\x41\xbf\x05\xd4\x17\x4e\xbb\x5f\x26\x97\x78\x1f\x1d\x2c\x16\xc9\xe0\x6e\xec\xda\xce\x09\x48\x05\x8b\xc5\x4a\x2b\x82\x42\xab\x19\xcf\x30\x83\x5c\x69\xa8\x6c\xb4\x07\x96\x81\x30\xa0\x2e\x45\x68\x0b\xc2\xef\xc0\xf0\x29\x96\x86\x4d\x8b\x5b\x27\x75\x3b\x41\x51\xa0\x3e\x80\x04\x6a\x27\xdd\x66\xc9\x2f\x4a\xdd\x95\x96\xba\x95\x7c\xca\xd4\x19\xe6\x4a\xa3\x03\xd5\x0a\xed\x9d\x5c\x0f\xd3\xa7\x8d\x96\xdc\xb5\xde\x5a\x2c\xc3\x30\x90\x7f\x9c\x63\xce\x2a\x61\x6c\x2b\xfe\x5a\xa1\xe6\x58\x26\x97\x4a\xfe\x8e\x5a\xf9\xad\x21\x12\xad\x9e\xf4\x73\x75\x2f\x5b\xda\x3d\xd2\x5f\xb8\x99\x78\xe1\x1e\xa8\x38\x0c\x83\xe3\x63\x38\xab\xb8\xc8\x20\x65\xe9\x04\xe1\x0e\xe7\xc0\xe5\x91\xe0\x12\xa1\x1a\x0b\x2e\xe6\x70\x04\xd3\x79\xf9\x55\xc0\xac\x84\x82\xfe\x16\x5a\x8d\x04\x4e\xcb\x30\x18\x55\x39\x39\x53\x1a\x3d\x65\x72\x2c\x90\x4a\xe3\x59\x95\xe7\xa8\xa3\xd8\xee\x26\x5f\x34\x37\x38\x34\x9a\xcb\x71\x54\x1a\x9d\x2a\x39\x4b\xde\x19\xc5\xa2\x95\xdc\x48\xde\x73\x99\xd1\x25\x21\xc2\x6e\x7b\x90\x92\x56\xcd\xe4\x18\x57\x73\x88\xf2\xa5\xb4\x40\xad\xeb\x4e\x2d\xbf\xed\xf2\xd9\xdc\x60\x74\x98\x1c\xee\x72\x63\x25\x27\x1f\x71\x63\x55\xee\x7b\xdc\x78\xa8\xb3\xc3\xe8\x23\xba\x88\x90\x93\x3e\xd0\xae\xdf\x88\xc3\xa0\x45\x7c\x50\x35\x88\x8f\xaa\x3c\xb6\x39\xbb\x91\x7f\x97\x9f\xaf\x88\xe3\x8b\xca\x24\x9f\x3e\xa8\xf4\x8e\x34\x59\xd6\x7b\x8e\xfc\x8c\x0c\xed\x3e\x7f\x7d\x87\xf3\x9b\xbd\x0d\x5d\x49\xe1\x4c\x85\xc1\x8c\x69\x9b\xf0\xf6\x32\x87\xf6\x1e\xbd\xf0\x86\x09\x80\xe6\x9d\xa1\xd1\x90\x23\xab\x90\xbf\xeb\x7c\x51\x9a\x87\x41\xb0\xcd\x83\xa6\xe0\xec\x16\xe9\xde\x86\xfd\xa4\x55\x65\xba\x07\x5a\x0a\xe9\x33\x5e\x06\x01\xdd\x4b\x31\xa4\xf7\xc2\xb4\x10\x38\x45\x69\xa2\x26\xca\xdd\xb6\x4e\x2b\xa3\x48\x25\x65\x0e\xef\xc1\x6c\x3d\x1b\x2d\x68\x04\x62\x6b\x8a\xaa\x0d\xe3\xb2\x3c\x95\xf3\x6d\x85\x60\xa0\xf9\x94\xe9\xf9\x7b\x9c\x2f\x0b\xf3\x2c\x86\x97\x2f\x9f\xa6\x65\x53\x39\x99\xc5\xce\xa3\x16\x03\x56\x14\x28\x33\x1f\xf2\xf5\x09\xbf\x69\x9a\xc0\x35\xff\xdf\x4f\x27\x37\x49\x92\x50\x7c\x94\xe5\xf6\x1f\xcf\x41\xa0\xf4\xe2\x31\x75\x81\xff\x3b\x8d\x3b\x9b\x40\x25\xed\xc8\x61\x94\x2f\xf7\xeb\x2d\xa1\x07\xa9\xaa\x44\x66\x8b\xf2\xc8\x56\x3b\xef\x63\x6a\xe3\x00\xc1\x4b\xdb\x22\x6c\x8f\x20\x73\xeb\x04\x5e\xa0\x1e\x63\xa4\xf1\x49\xc4\xfd\xa8\x1e\x8f\x2c\x5d\x9d\xc0\xb7\xfc\x93\xfe\x5a\x45\xbc\xea\x7c\xfd\xf8\xbd\x78\x98\x1c\x3e\xad\xbd\xf9\xed\x69\xed\x04\xf6\x47\xa7\xa5\xdb\x9d\x7c\x66\xba\xbd\xff\x1b\xe9\xb6\x25\x28\xa1\x8e\x3a\x87\xbe\x93\x77\x45\xec\x23\x2d\x5d\x0c\x87\x1f\x3f\x44\x19\x67\x02\x53\xd3\x83\x83\x35\x53\x07\x5b\x43\xde\x70\xd1\x1a\x90\x3a\x95\xce\x22\x71\x3f\xe1\x06\xc9\x29\xe2\x77\xca\xee\x30\xba\xbe\x29\x6d\xb1\xef\x59\x88\xf6\xb5\x40\xbd\x2b\x48\x55\x31\x8f\x96\x1a\xf7\x77\x2f\x5e\x71\x64\x79\x79\x3b\x9a\x9c\xfb\xfe\xd6\x3e\x2e\xea\x22\xb4\xa2\x4b\x84\x67\x4c\x54\x78\xc1\x8a\xc2\xc6\x45\x8d\xa0\x7d\xc7\x9c\x71\x99\xf9\xad\x6d\xd1\x7e\x9e\x17\xdb\xf3\x6b\xa9\x76\xe9\x43\xec\x32\x6c\xed\x81\xb5\xf2\xc2\xea\x16\x1d\xa2\x82\x04\x7d\x0a\x3a\x8f\x35\x9a\xe7\xf6\xd7\xa6\x40\xb0\xd1\xd5\x55\x5f\x9b\x2a\x59\xdb\x46\x2a\x2a\x5b\x0b\x34\xe6\x94\x96\xc9\x3b\x99\x71\x8d\xa9\x89\x9a\x85\xdf\x48\xe2\xd7\x3c\x52\x94\x12\x33\x26\x56\x1e\x8d\x76\xb3\x7c\xa3\xd5\xb4\x09\xc1\x2a\xf4\xaf\x80\x15\x9e\x62\xd7\xb5\x9d\x27\x25\x5c\xdf\x70\x69\x50\xe7\x2c\xc5\x85\x7b\x08\x13\x76\xeb\x60\x75\x80\x6c\x0e\xb6\xc6\x07\x46\x6f\x37\xdd\xd1\xe1\x22\xe5\xb9\x1b\x14\xce\x71\x54\x8d\x2f\x54\x86\x56\x6b\x3e\x35\xc9\x9b\x42\x73\x69\x84\x8c\xda\x7d\xfb\x7a\xd2\x8d\x2e\x7b\xa1\xe3\xdd\xd2\x84\x4e\x6b\x6d\x47\x3c\x6b\x43\x93\x9b\x07\x02\x97\x1b\xf4\xa4\x4f\x6c\xcd\xf8\xa4\xee\xa3\x8e\x13\xce\x06\x5d\x86\x64\x98\x32\x9b\x6b\x04\x8a\xbf\x48\x6e\xc8\xda\xae\xc9\x9b\x8a\xec\x00\xf1\x14\xad\x7e\xd2\x5c\xe6\x56\xbf\x0f\xe5\x57\x91\xbc\xd6\xfa\x52\x7d\x52\xf7\xee\xd5\xe9\x2d\x52\xd2\x1d\x1f\x83\x2d\x76\x76\xcc\x94\x87\xc6\xb3\x0e\x4c\xce\xcd\x84\xe6\xd1\xfb\x09\x4a\x30\x13\xd4\x78\x58\xd2\xdc\xe5\xea\x81\x4f\x4b\xb0\x51\x6c\xc7\xe8\xb6\xb9\x42\x36\x38\x9a\x15\x37\x43\xb4\x8e\xc8\xc3\x73\xbb\x01\x59\x8d\xbf\x9d\xd8\x36\x4e\x5a\xd4\x63\x68\x56\xa7\x41\xdd\xd5\xf7\x27\x74\x9a\x83\x36\x73\xba\x4f\xd9\xfd\xde\xc6\xcd\x1b\x7c\x0f\x71\xfb\xe6\x86\xbe\x0b\x77\x6f\x03\xcb\xb7\x77\xf0\xc8\x34\xbb\xfc\xaf\xc9\x4c\x9d\xe6\x06\xf5\x77\x4d\xb2\x7e\x56\x5d\xd2\xe6\x95\x4a\x2e\xba\x53\x6c\x1d\xfe\x15\x00\x00\xff\xff\x52\x95\xb2\x37\x51\x16\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSingletonMssql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x4d\x6f\xda\x40\x10\x3d\x7b\x7f\xc5\xd4\x52\x24\xaf\xb2\x72\x9a\x6b\x23\x2a\xd1\xe0\x26\x54\xc4\x40\x6c\xda\x03\xe1\xb0\xe0\x31\x59\xc9\x2c\x68\x3f\x50\xa3\x2a\xff\xbd\x1a\xdb\x94\xcf\x4a\x55\x2f\xe0\x9d\x8f\xa7\x37\xef\xcd\xdc\xdc\xc0\xdc\xab\xaa\x98\x6c\x2c\x1a\x37\xf6\x68\xde\x9e\xb2\x6c\x3c\x68\xa2\x16\x24\xd0\xc3\x3a\xe9\x70\x85\xda\x81\x75\x46\xe9\x25\x78\x4b\xbf\xee\x15\xc1\xd7\x8d\x3d\xe9\x24\x6c\xcc\x7a\xab\x0a\x2c\x62\x56\x7a\xbd\xb8\x8c\x1b\x15\x4a\x42\x61\xd4\x16\x8d\x8d\x7b\x4a\x56\xb8\x70\x02\x9c\x9c\x57\x98\xca\x15\xb6\xf8\x02\x36\x46\xad\xa4\x79\x13\xe0\x37\x85\x74\x28\x40\x69\x02\x82\xe9\x6c\x57\xb1\xf6\x6e\xe3\xf7\x01\xbe\xa3\xf6\x8b\x05\x6d\x6d\x87\x42\x2b\xa9\x97\x15\xc6\xfd\x02\xb5\x1b\xfb\xb5\xc3\xac\x52\x0b\x24\x1a\xf1\x60\x2c\x80\xfe\x9f\xc7\x3b\x78\xce\x58\x30\xf7\x25\x7c\x3a\x6c\x7d\x40\xf7\xc5\x97\x25\x9a\x88\xb3\xa0\xc0\x12\xcd\x41\x72\xe4\x77\xc9\xb9\x2f\xa9\xdd\x3a\x69\x5c\x5f\x17\xf8\x93\x50\x6e\x19\x0b\xca\x95\x8b\xbf\x6e\x8c\xd2\xae\xa4\x22\x01\xe1\x53\xf2\xfc\x90\x40\x3f\xcd\x87\x70\x65\x41\x5a\x98\xba\xd9\x8b\x0e\x0f\x74\xe0\x97\xda\x26\x59\x3f\x7d\x80\x28\x4b\x06\xc9\x7d\x0e\x57\x96\xd7\xad\x76\x06\xd1\xf4\xca\xce\x38\x21\xb0\x20\x38\xe0\x56\xc9\x05\xbe\xae\xab\x02\x8d\xad\x07\x9e\x58\xac\x99\x1d\x26\x04\x54\xa8\xa3\x56\x6e\x2e\x60\xcf\x5f\xc0\x2d\x6f\x01\x95\x5e\xda\xf8\xdb\x5a\xfd\x29\x14\xad\xda\x51\xa3\x1f\xbf\x0e\x45\x78\x7d\x10\x1a\x8c\x39\x3f\x9a\xa1\x1d\x61\x98\x42\x14\x52\x62\x6d\x40\x09\xd8\x92\x46\x46\xea\x25\xee\x0c\x27\xfb\x02\x55\x82\x82\x0f\x1d\xf8\x58\xbf\xce\x51\xa0\x9b\xf6\x80\x60\x82\x77\x16\x5c\x10\x6a\x6a\x67\x31\x49\x02\x1d\x52\xb6\xfe\x0c\x05\x6c\x05\x6c\x39\xa3\x96\x33\x40\xd2\xee\xc4\xbc\xeb\xce\x91\x30\xec\x42\xd7\x8f\xc7\x24\x85\xa7\x6e\x7e\xff\x98\xf4\x20\xa7\x47\x78\xd9\xb7\x51\xaf\x9b\x27\x90\x25\x64\x5a\xed\xf3\xde\xa3\x0c\xdd\x48\x1a\xb9\x22\xd3\x6d\x74\xac\xe0\xa9\xc8\xc7\xe6\x34\x87\xc1\x2f\xd3\x6e\x93\x7f\x65\x9d\x0e\xf3\x7f\x61\xde\x4f\xb3\xe4\x39\x87\x88\x76\xed\x7b\x77\x30\x49\xb2\xfa\x3b\x3c\x5b\x8b\xe6\x7c\x04\x84\x24\xe6\x7f\x6f\x61\x7b\x84\xa7\x4b\x48\x63\xa8\xb2\xae\x68\x8e\x9e\xc3\xe7\x76\x37\xce\x29\xbf\xe8\xe1\x24\x1f\x4d\x72\x68\xb8\x27\xbd\xda\xfe\xbb\x70\x27\x66\x4b\xb8\x01\x12\x10\xce\xc4\xbe\x30\xa4\x9d\x7d\x07\xac\x2c\x9e\xa0\xb7\xe0\x77\x61\xbd\x40\x2c\x30\xe8\xbc\xd1\x30\xf7\x65\x9c\x35\x1e\x71\xf6\xce\x7e\x07\x00\x00\xff\xff\xa0\xc3\x9b\xd6\x4d\x05\x00\x00")

func templatesSingletonMssql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonMssql_upsertGoTpl,
		"templates/singleton/mssql_upsert.go.tpl",
	)
}

func templatesSingletonMssql_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonMssql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/mssql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMssql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xed\x53\xdb\x36\x18\xff\x6c\xff\x15\x4f\x73\xd7\xd6\x66\x9e\x68\xd7\xdd\x3e\xd0\xcb\xf5\xf2\x62\x5a\xae\x24\x81\x38\x5b\xb7\xa3\x0c\x94\x58\x06\x1d\xb6\x64\x24\x19\x9a\x31\xfe\xf7\x9d\x24\xdb\xb1\xd3\x24\x85\x4f\xe3\x4b\xd0\xa3\xe7\xf5\xf7\xbc\xc9\x77\x58\x80\xb8\xfa\x36\x8a\xa2\xd3\xe3\x1b\xb2\x84\x2e\x08\x72\x45\xbe\xe5\x68\x54\x48\x35\xe0\x59\x4e\x53\xe2\x5d\x7a\x1f\x32\xff\xef\xde\xf1\x2c\x9c\xc2\xac\xd7\x3f\x0e\x01\xed\xf5\x86\xc3\xaf\xf2\xa7\xc1\x64\x1c\xcd\xa6\xbd\xa3\xf1\x0c\xd0\x1e\x1c\x4e\xa6\xe1\xd1\xc7\x31\x7c\x0e\xff\x42\x7b\x1f\xd0\xde\x57\xf6\x61\x1a\x1e\x86\xd3\x70\x3c\x08\x23\xb4\x77\xe9\xbb\xae\x5a\xe6\x04\x32\x29\x6f\xd3\x19\x91\x8a\x08\x90\x4a\x14\x0b\x05\x0f\xae\x13\xcf\x07\x9c\x31\xd0\x7f\x7b\xf2\x36\x45\xc3\xbe\xa6\x8d\x71\x46\x0c\x4d\x2a\x41\xd9\x95\xeb\x5c\x73\xa9\x00\x5a\xa4\x42\x12\xb1\x46\xca\xb1\x94\x6b\x24\x29\xd3\x8c\xc7\xa4\xc5\xc5\x45\xa5\x8b\x32\xe5\x3a\x8a\x48\x35\xec\x1b\x93\xb5\xd4\x0d\xcd\xa3\xd3\xe3\x41\x16\xc3\x9c\xf3\xd4\x7d\x74\xdd\xa4\x60\x0b\xa0\x8c\x2a\xcf\xb7\x7e\x8f\x30\x65\xd0\x85\x57\x8d\xb8\x1e\x1e\x6b\x4e\x2f\x83\xbd\xc6\x8d\x0f\x92\xa8\x22\xf7\x7c\x20\x42\x70\xa1\x35\xe8\x24\x10\x21\x2c\xc1\x75\x9d\x3b\x9a\x13\x81\x22\xa2\x86\x24\xc1\x45\xaa\xbc\x8e\x91\x47\x72\x71\x4d\x32\xdc\x09\xa0\x13\xcf\x79\xc7\xdf\xc1\x68\x43\xd5\x9c\x4a\x14\x64\x17\xab\x86\xa0\x13\xc0\xdb\x5f\xdf\xbd\xf3\x5d\xd7\xc9\x50\x09\x79\x17\xac\xc4\x47\xa2\x22\x03\x45\x25\x10\xcf\x19\xce\x8c\xca\x0c\x99\x5c\x6c\xe5\xd4\xb7\x96\xcf\x24\x68\x2b\x9f\xbe\xb5\x7c\x26\x6b\x5b\xf9\xf4\x6d\xc9\xa7\xf3\xd6\xe0\x3b\x62\xed\x78\x0c\x53\x95\xef\xad\xfa\x2a\x94\x0c\x77\x23\xf5\x5b\x05\x34\x4f\x33\xfc\x46\x6d\x34\x64\xfa\x9c\xa7\xb5\x89\x1b\x9a\xcb\xdb\x74\x91\xc5\x1d\x8d\xae\x4e\x72\x17\xee\x70\x8a\x51\x9f\x5c\x51\xf6\x07\x4e\x69\x8c\x15\xe5\xcc\xf3\x51\x79\x20\x9e\xeb\x38\x86\xc5\x1a\x1f\x73\x15\x66\xb9\x5a\x7a\x3b\xd1\x0b\xa0\x7d\x7c\x9e\x0e\x9b\xa9\x5a\x47\x79\xac\x74\x8c\xb9\xf2\xcc\x3f\xe1\x6d\x81\x53\xe9\x6d\x87\x3d\x80\x37\xb5\x12\x4b\x79\xae\x27\x15\xbc\xb5\x9a\x9a\xf0\x3c\x3d\x75\x6e\x6b\x45\x2b\x8a\xeb\xf8\x68\x70\x4d\x16\x37\x9e\xce\x09\x4d\x4c\xef\xbd\xe8\x02\xa3\xa9\xee\x46\x47\x10\x55\x08\xa6\xa9\xae\xf3\xe8\xba\xce\xfe\x3e\x0c\x04\xc1\x8a\x00\x06\x81\x59\xcc\x33\xfa\x0f\x89\x21\x9e\x83\x76\x0d\x19\x15\x29\x61\x5e\xde\x28\x22\x1f\xba\x5d\x78\x63\xd4\xe5\xed\xda\xaa\x35\xa0\x48\xe1\x79\x4a\xec\x85\x97\x97\x8d\xe7\x5b\x9b\x34\x81\x17\xad\x02\xd3\x9a\x4a\x57\xbb\x90\xa1\x58\xf0\x7c\x66\xd4\x7a\xfe\xfb\xf5\x00\x5a\x11\x38\x8f\x6d\xc9\x85\x09\xe5\xc9\xb2\xae\xe3\x58\x09\xed\xc4\x41\x17\xc8\x37\xb2\x40\x03\x9e\x65\x98\xc5\x5e\xa7\xac\xed\x00\x3a\x3f\x47\x9d\x00\xec\x44\xd0\xa7\xdf\xcd\x49\x17\xa3\x3e\x9d\x98\x93\xee\x5f\x7d\x8a\xcd\xa9\x81\x95\x36\x92\x04\xc6\x93\x83\x2e\x70\x89\x26\x39\x61\x5e\xc7\xc0\x23\x2f\xec\xd4\x43\xf2\x36\xd5\x5d\xb7\x21\x5f\x0d\x97\xb9\x90\xe8\x8b\xc0\xb9\x47\x84\x36\x9c\x60\x9a\x92\x18\x14\x07\x9e\x13\x06\xdf\x29\x84\x84\xa6\xa6\x97\x6d\xa0\x31\x49\x88\x00\x3d\xb4\xf5\x64\x87\x0b\xe8\x42\x82\x06\x29\x97\xc4\xf3\xe1\xd1\x54\x8b\x23\x55\x5c\xfa\xf9\x6a\xbe\x54\x44\xa2\x7e\x91\x24\x66\xde\x37\x80\x42\x91\x8a\xcd\x4a\x60\xe4\xfe\xf0\x33\x59\x0e\x89\x54\x82\x2f\x89\xf0\x1a\xbb\x36\x80\xc4\x5f\x17\xb2\x49\xb2\x36\xdc\x66\xde\x9a\x5c\x58\xa8\xdd\x89\xdb\x8a\x82\xd4\xb2\x60\x93\x06\x0b\x9b\xc4\x55\xf8\x1b\x8c\x7d\xc1\x74\xa3\xad\x24\x53\xe8\x44\x50\xa6\x52\xa6\x8d\xf8\xeb\x34\x1b\x41\xd9\xab\x9e\xef\x3f\xd1\xbf\x7b\x4c\x15\x24\x5c\x6c\x76\xd1\x78\x59\x6a\x61\x34\xdd\xb1\x60\x65\x3a\xe2\x31\xf1\xcc\xf8\xb7\x8b\xdc\x2f\x7f\xb5\xfb\xf2\x9e\xaa\xc5\x35\x98\xdb\x07\xd7\x59\x60\x49\xca\x3d\x79\xb0\xea\x7e\x4b\xa8\x6e\x13\x9c\xca\xf6\xb5\xa5\xb8\xba\x66\xf4\x3a\x6d\x5e\xc5\x54\xea\x42\xeb\x68\x87\xb7\xfa\xd8\x6e\xc3\xd5\x5b\x40\x57\xe5\x41\x17\x34\x98\x51\xae\xd1\x4c\xbc\x4b\xd7\x19\x4c\xc3\xde\x2c\x84\x61\x6f\xd6\xeb\xf7\xa2\x10\x5e\xca\xf7\xae\xf3\x71\xe2\x3a\xf6\x51\xb6\xa2\x9f\xbd\x3d\x97\xae\x13\x85\x33\x98\x86\xbd\xe1\xc5\x60\x32\x1a\x1d\xcd\x66\xe1\xf0\x22\x1a\xf7\x4e\xa2\x4f\x93\x19\x4c\xc6\x46\xf4\x72\xbd\x07\x2b\xf7\x33\x24\x0a\x36\xc8\x62\x4f\xde\xa6\x01\x3c\xbf\xc3\xfd\xed\x31\x37\x87\xd6\x2a\xe2\xfd\x7d\x88\x28\x5b\x10\x18\x45\x10\x9d\x1e\xc3\x2f\x6f\xde\xfe\x06\x54\xc1\x02\x33\x98\x13\x88\x39\x23\x70\x4f\xd5\xb5\xe1\x1c\x4e\x27\x27\xab\x70\xcf\xe0\xe8\x10\xc2\x3f\x8f\xa2\x59\x04\xe7\xf0\x00\x31\x56\x78\x8e\x25\xb9\xd0\x83\x19\xfe\x5d\x9d\x25\xc3\xb9\xbc\xe6\xca\x5e\x3c\xc2\x19\x04\x08\x21\x06\xe7\x70\xf6\xfe\x7c\x1b\xe8\xb5\x6e\x2f\x0a\x8f\xc3\xc1\xcc\x8c\x7b\x38\x9c\x4e\x46\x20\x97\x12\x55\xca\x25\xb8\x8e\xf3\xe5\x53\x38\x0d\x2d\x43\x17\x5e\xbf\x94\xaf\x75\xc9\xb6\x9d\x7d\x29\x37\xe0\xfe\x3f\x64\x41\x11\x2c\x62\x7e\xcf\x9a\x39\xa0\x89\xde\x29\xf6\x01\xde\xe8\xf3\x8a\x56\x0d\xc1\x1f\xef\xa6\x83\xe7\x2f\xa7\xa7\x76\x75\x05\x88\x1e\xad\x41\x35\x1a\xca\xb6\x0e\x00\x8b\x2b\x09\x08\xa1\xaa\xdd\xeb\xd0\x16\x1b\xf6\x56\x29\x6c\xa5\x10\x42\xbe\x61\xab\xa7\xb6\xd5\x21\xd1\x98\xdc\x4f\x09\x8e\x89\xb0\x46\xf5\xfc\x97\x2a\xe6\x85\xda\x38\xfe\x77\x6c\x86\x52\xb9\x96\x34\xd3\x9d\x17\xaa\x26\xb6\x46\x7e\x03\x46\x7d\x3d\x2d\xd8\x06\x04\x9b\x83\xb6\x1a\x9e\xa2\x60\x8c\xb2\xab\x83\x4e\x8d\x8c\x0d\xce\x77\xbf\x1b\xcc\xbc\x50\xad\xc1\xfc\x83\xb9\xbd\xfe\x1a\x7a\x4a\xaa\x16\x9c\xe9\xf2\xf2\xca\xef\xb8\xc0\x66\xc3\xdf\x51\x69\x75\xd9\xdb\xab\xc0\xe8\x37\xf6\xda\x1f\x47\xce\x8a\xa3\x04\xee\x36\x2d\x9f\x0b\xc6\x83\x4e\x00\xb1\xa0\x77\x44\x20\xb3\x66\xfb\x05\x4d\xe3\xd3\x82\x88\x65\x19\x52\xd5\x2b\xd5\x6b\x64\xbd\x17\x6d\x5f\xd9\x2f\x0c\xfd\x5b\xbe\x1a\x35\x12\x5b\x1f\x8a\x8c\xa6\xc1\x77\xf8\xb4\x23\x79\x74\xff\x0b\x00\x00\xff\xff\x05\x8f\xf1\xef\x69\x0f\x00\x00")

func templates_testSingletonMssql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_main_testGoTpl,
		"templates_test/singleton/mssql_main_test.go.tpl",
	)
}

func templates_testSingletonMssql_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMssql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x0a\xc2\x30\x10\x44\xef\xfd\x8a\xa5\xe4\xd0\x4a\x9b\x0f\x10\x3c\x78\xd4\x83\x88\xb4\x1f\x10\xed\xb6\x04\xe2\x5a\xba\x5b\x10\x42\xfe\x5d\xd2\x46\xe9\xc1\xdb\x0c\x6f\x32\x99\xed\x67\x7a\x40\x83\x2c\xed\xc8\x38\x49\x21\xb0\x13\x64\xb1\x34\xe8\xa6\x04\x9f\x01\x78\x5f\xc3\x64\x68\x40\x50\x96\x3a\x7c\x57\xa0\xc4\xdc\x1d\xc2\xfe\x00\xba\x89\x8a\x43\x48\x39\xdb\x27\xa8\x4f\x7c\x7e\x59\x5a\x30\xd4\x3f\x8e\x8e\xb7\x56\x19\x67\x0d\xc7\x22\xa5\x8f\x51\x22\xaf\x8d\xdf\x96\x8b\x79\xe2\x92\x16\x7d\x9b\xa9\xc8\xbd\x5f\x9f\xe8\x76\xbc\xba\x79\x32\x2e\x84\xbc\x82\x38\xf8\x0f\x59\x2f\x2a\x97\xbf\x90\xba\xed\x8c\xe4\x42\xf6\x09\x00\x00\xff\xff\x11\x5d\x4c\xce\xff\x00\x00\x00")

func templates_testSingletonMssql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_suites_testGoTpl,
		"templates_test/singleton/mssql_suites_test.go.tpl",
	)
}

func templates_testSingletonMssql_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x3d\x6f\xdb\x30\x10\x9d\xc5\x5f\x71\x35\xda\x82\x2a\x14\x06\x5d\x53\x78\xc8\xd7\x10\x14\x35\x8c\x58\x9e\x0b\x46\x3a\x39\x84\x69\x52\x20\x4f\xb5\x5d\x81\xff\xbd\x20\xe5\x24\x4e\x9c\x14\x1e\xda\x21\x83\x2d\x91\x78\xf7\xde\xbd\xfb\x50\xdf\x9f\xc0\x47\xa9\x95\xf4\x70\x36\x06\x71\x1e\xdf\xd0\x8b\x52\xde\x69\x84\xe1\x21\x26\x72\x85\x21\xb0\xa6\x33\x15\x10\x7a\xea\xfb\x21\x42\xcc\xdb\xa9\xee\x9c\xd4\x21\xcc\x5b\x8f\x8e\x38\xc1\x97\x08\x50\x66\x21\xca\x1c\x7a\x96\x91\x98\x4a\x27\xb5\x46\xcd\x73\xc6\x32\xd5\x80\x46\xc3\x1f\x09\xae\xec\xda\xcc\x94\x59\x74\x5a\xba\x10\x2e\xad\xee\x56\xc6\xe7\x30\x1e\xff\x0d\x36\x75\x6a\x25\xdd\xf6\x3b\x6e\x1f\x03\x7a\x96\x65\x24\x66\x4b\xd5\xf2\x51\xfc\x6f\x95\x59\x00\x25\x0f\x6b\x45\xf7\x60\x8d\xde\x42\x3b\xc4\xc1\x12\xb7\x50\x0d\x91\xa3\x9c\x65\x81\xb1\xcc\x23\xd6\xd1\xbf\x93\xa6\xb6\x2b\xf5\x1b\xc5\x04\xd7\x33\xc4\x9a\xe7\x2c\xfb\x25\x1d\xa0\x4b\x3f\xeb\x58\x76\x7a\x0a\xe7\x44\xb8\x6a\x09\xe8\x1e\xe1\x66\x32\xbb\xbe\x2d\xc1\xab\x1a\xc1\x36\x20\x0d\xcc\xa7\xf1\x86\x65\x36\x32\xee\xd5\xea\xc9\x41\x1f\x52\x29\x22\xe9\xbe\xe6\x8c\x5c\x57\x11\x8f\xc9\x14\xf0\xd9\x16\xf0\x46\x01\xae\x2e\xca\x6d\x8b\xbe\x00\x72\x1d\xe6\xdf\x12\xcf\x87\x31\x18\xa5\x77\x85\xb8\x8e\x99\x36\x7c\x34\x37\xa9\x04\x64\x9f\x44\x5e\x4f\x08\x7c\x92\x3e\x83\x4f\x7e\x54\x44\xbe\x5d\x5d\xfa\x5e\x35\x60\x2c\x81\x98\xd8\x4b\x6b\x08\x37\x14\x42\x45\x9b\xe8\xac\x1a\xce\xe2\x42\x56\xcb\x85\xb3\x9d\xa9\x79\xde\xf7\x68\xea\x10\x58\x36\x40\x7e\x74\x9e\xca\x0d\x4f\x2c\xfb\x0c\x07\x17\x77\x56\x69\x71\x81\x0b\x65\x12\x87\xf6\xb8\x7f\x57\x6e\x78\x45\x9b\x22\x1a\x7c\x50\x38\x0a\x94\xb3\xac\xc6\x06\x1d\xc4\xc9\xe5\x39\xf4\xf0\x13\xc6\x40\x1b\x71\x6b\xb5\xbe\x93\xd5\x92\xe7\x10\x62\x87\x1f\x7b\x61\xc5\x6e\x90\xdf\x32\x1e\x7b\x82\xa6\x86\x93\x10\x20\x9e\x92\xfe\x8d\x69\xd0\xf1\xfc\xf9\xe9\xb8\xbe\x74\x49\xee\xf5\xa6\x1c\x74\xa3\xb2\x9d\xa1\x74\xf1\x62\xb2\x1e\xb6\x90\xe7\xe2\x32\x62\x8e\x4c\xff\xc9\xf9\x61\x96\xfc\x41\x36\x42\x92\x70\x04\x7d\x7d\x06\x19\xad\xa5\x21\xb0\x06\xc1\x61\x65\x5d\x5d\xc0\xc2\xd2\xd9\xa8\x18\xf0\xbb\xa4\x5f\xac\xcb\x7c\x7a\x75\x5e\x5e\xbf\xb6\x2e\xff\x62\x21\x1a\xa9\x3d\xbe\x09\x3b\xf8\x70\x08\x21\xfe\xeb\xfa\xbc\xbf\xb9\x7a\x27\x63\x15\xd8\x9f\x00\x00\x00\xff\xff\x36\x8a\x47\x09\xb8\x06\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl": templates17_upsertGoTpl,
	"templates/singleton/mssql_upsert.go.tpl": templatesSingletonMssql_upsertGoTpl,
	"templates_test/singleton/mssql_main_test.go.tpl": templates_testSingletonMssql_main_testGoTpl,
	"templates_test/singleton/mssql_suites_test.go.tpl": templates_testSingletonMssql_suites_testGoTpl,
	"templates_test/upsert.go.tpl": templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"mssql_upsert.go.tpl": &bintree{templatesSingletonMssql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"mssql_main_test.go.tpl": &bintree{templates_testSingletonMssql_main_testGoTpl, map[string]*bintree{}},
			"mssql_suites_test.go.tpl": &bintree{templates_testSingletonMssql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

